[tool.poetry]
name = "pypoetry_template"
version = "0.0.1"
description = "Python project template using Poetry (Github version)"
authors = ["author <author@mail.com>"]
repository = "https://github.com/povanberg/python-poetry-template.git"
documentation = "https://povanberg.github.io/python-poetry-template"
readme = "README.md"
license = "GPL3.0 license"
packages = [{ include = "pypoetry_template", from = "src" }]

[tool.poetry.dependencies]
python = ">=3.8.1,<=3.11"
wheel = "^0.40.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.2.0"
pytest-cov = "^4.0.0"
pre-commit = "^3.2.0"
mypy = "^0.991"
isort = "^5.12.0"
black = "^22.10.0"
flake8 = "^6.0.0"
flake8-pyproject = "^1.2.3"
flake8-bugbear = "23.5.9"
flake8-docstrings = "*"
flake8-formatter_junit_xml = "*"
pylint = "^2.17.1"
pylint_junit = "*"
bandit = "^1.7.5"
safety = "^2.3.5"

[tool.poetry.group.tests.dependencies]
pytest-cov = "4.0.0"
pytest-mock = "<3.10.1"
pytest-runner = "*"
pytest-xdist = "*"
pytest = "7.3.1"
pytest-github-actions-annotate-failures = "*"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.4.2"
mkdocs-material = "^9.1.3"
mkdocstrings = "^0.20.0"
mkdocstrings-python = "^0.8.0"
mkdocs-gen-files = "^0.4.0"
mkdocs-literate-nav = "^0.6.0"
mkdocs-section-index = "^0.3.4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
ignore = ['E203', 'E266', 'E501', 'W503', 'F403']
line-length = 88
target-version = ['py39']
fast = true

[tool.flake8]
ignore = [
    'E203',
    'E266',
    'E501',
    'W503',
    'F403',
    "E722",
    "B001",
    "W503",
    "E203",
]
per-file-ignores = ['__init__.py:F401']
max-line-length = 88
count = true
select = "F,E,W,B,B901,B902,B903"
exclude = [
    ".eggs",
    ".git",
    ".tox",
    "nssm",
    "obj",
    "out",
    "packages",
    "pywin32",
    "tests",
    "swagger_client",
]


[tool.isort]
profile = "black"

[tool.mypy]
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true

[tool.pytest.ini_options]
filterwarnings = ["ignore::DeprecationWarning"]
pythonpath = ["src"]
addopts = "--cov-report xml:coverage.xml --cov src --cov-fail-under 0 --cov-append -m 'not integration'"
testpaths = "tests"
junit_family = "xunit2"
markers = [
    "integration: marks as integration test",
    "notebooks: marks as notebook test",
    "gpu: marks as gpu test",
    "spark: marks tests which need Spark",
    "slow: marks tests as slow",
    "unit: fast offline tests",
]

[tool.bandit]
tests = ["B201", "B301"]
skips = ["B101", "B601"]
exclude_dirs = ["build", "dist", "tests", "scripts"]
number = 4
recursive = true
targets = "src"

[tool.coverage.run]
branch = true

[tool.coverage.report]
fail_under = 100


[tool.pyright]
include = ["src"]
exclude = ["**/node_modules", "**/__pycache__"]
venv = "env39"

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py, integration, spark, all

[testenv]
commands =
    pytest -m "not integration and not spark" {posargs}

[testenv:integration]
commands =
    pytest -m "integration" {posargs}

[testenv:spark]
extras = spark
setenv =
       PYSPARK_DRIVER_PYTHON = {envpython}
       PYSPARK_PYTHON = {envpython}
commands =
    pytest -m "spark" {posargs}

[testenv:all]
extras = all
setenv =
       PYSPARK_DRIVER_PYTHON = {envpython}
       PYSPARK_PYTHON = {envpython}
commands =
    pytest {posargs}
"""

[tool.pylint]
extension-pkg-whitelist = [
    "numpy",
    "torch",
    "cv2",
    "pyodbc",
    "pydantic",
    "ciso8601",
    "netcdf4",
    "scipy",
]
ignore = "CVS"
ignore-patterns = "test.*?py,conftest.py"
init-hook = 'import sys; sys.setrecursionlimit(8 * sys.getrecursionlimit())'
jobs = 0
limit-inference-results = 100
persistent = "yes"
suggestion-mode = "yes"
unsafe-load-any-extension = "no"

[tool.pylint.'MESSAGES CONTROL']
enable = "c-extension-no-member"
max-line-length = 88
disable = "C0103"
ignore-paths = "docs, scripts, tests"

[tool.pylint.'REPORTS']
evaluation = "10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"
output-format = "text"
reports = "no"
score = "yes"

[tool.pylint.'REFACTORING']
max-nested-blocks = 5
never-returning-functions = "sys.exit"

[tool.pylint.'BASIC']
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
bad-names = ["foo", "bar"]
class-attribute-naming-style = "any"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
docstring-min-length = -1
function-naming-style = "snake_case"
good-names = ["i", "j", "k", "ex", "Run", "_"]
include-naming-hint = "yes"
inlinevar-naming-style = "any"
method-naming-style = "snake_case"
module-naming-style = "any"
no-docstring-rgx = "^_"
property-classes = "abc.abstractproperty"
variable-naming-style = "snake_case"

[tool.pylint.'FORMAT']
ignore-long-lines = "^\\s*(# )?.*['\"]?<?https?://\\S+>?"
indent-after-paren = 4
indent-string = '    '
max-line-length = 120
max-module-lines = 1000
single-line-class-stmt = "no"
single-line-if-stmt = "no"

[tool.pylint.'LOGGING']
logging-format-style = "old"
logging-modules = "logging"

[tool.pylint.'MISCELLANEOUS']
notes = ["FIXME", "XXX", "TODO"]

[tool.pylint.'SIMILARITIES']
ignore-comments = "yes"
ignore-docstrings = "yes"
ignore-imports = "yes"
min-similarity-lines = 7

[tool.pylint.'SPELLING']
max-spelling-suggestions = 4
spelling-store-unknown-words = "no"

[tool.pylint.'STRING']
check-str-concat-over-line-jumps = "no"

[tool.pylint.'TYPECHECK']
contextmanager-decorators = "contextlib.contextmanager"
generated-members = "numpy.*,np.*,pyspark.sql.functions,collect_list"
ignore-mixin-members = "yes"
ignore-none = "yes"
ignore-on-opaque-inference = "yes"
ignored-classes = "optparse.Values,thread._local,_thread._local,numpy,torch,swagger_client"
ignored-modules = "numpy,torch,swagger_client,netCDF4,scipy"
missing-member-hint = "yes"
missing-member-hint-distance = 1
missing-member-max-choices = 1

[tool.pylint.'VARIABLES']
additional-builtins = "dbutils"
allow-global-unused-variables = "yes"
callbacks = ["cb_", "_cb"]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "_.*|^ignored_|^unused_"
init-import = "no"
redefining-builtins-modules = "six.moves,past.builtins,future.builtins,builtins,io"

[tool.pylint.'CLASSES']
defining-attr-methods = ["__init__", "__new__", "setUp", "__post_init__"]
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make"]
valid-classmethod-first-arg = "cls"
valid-metaclass-classmethod-first-arg = "cls"

[tool.pylint.'DESIGN']
max-args = 5
max-attributes = 7
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-parents = 7
max-public-methods = 20
max-returns = 6
max-statements = 50
min-public-methods = 2

[tool.pylint.'IMPORTS']
allow-wildcard-with-all = "no"
analyse-fallback-blocks = "no"
deprecated-modules = "optparse,tkinter.tix"

[tool.pylint.'EXCEPTIONS']
overgeneral-exceptions = ["BaseException", "Exception"]
